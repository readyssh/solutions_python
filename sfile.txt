-- ✅ 1. Understand Databases, Tables, and Schemas
-- (Conceptual - no command)

-- ✅ 2. CREATE DATABASE
CREATE DATABASE school_db;

-- ✅ 3. Naming Best Practices
-- Use lowercase names, underscores, and avoid spaces/special characters.
-- Good: employee_records
-- Avoid: Employee Records!

-- ✅ 4. DROP DATABASE
DROP DATABASE school_db;

-- ✅ 5. Create a MySQL User
CREATE USER 'student'@'localhost' IDENTIFIED BY 'password123';
GRANT ALL PRIVILEGES ON *.* TO 'student'@'localhost';
-- Login: mysql -u student -p

-- ✅ 6. Create Database and Tables
CREATE DATABASE company_db;
USE company_db;

CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    department VARCHAR(30),
    salary DECIMAL(10,2)
);

-- ✅ 7. Insert Data into Table
INSERT INTO employees (emp_id, name, department, salary)
VALUES
(1, 'Alice', 'HR', 50000),
(2, 'Bob', 'Finance', 60000),
(3, 'Charlie', 'IT', 70000);

-- ✅ 8. ALTER TABLE
ALTER TABLE employees ADD COLUMN email VARCHAR(100);

-- ✅ 9. DROP TABLE / DATABASE
DROP TABLE employees;
DROP DATABASE company_db;

-- ✅ 10. Basic SELECT Queries
SELECT * FROM employees;
SELECT name, salary FROM employees;

-- ✅ 11. WHERE Clause for Filtering
SELECT * FROM employees WHERE department = 'IT';
SELECT * FROM employees WHERE salary > 55000;

-- ✅ 12. ORDER BY
SELECT * FROM employees ORDER BY salary DESC;
SELECT name FROM employees ORDER BY name ASC;

-- ✅ 13. INNER JOIN
CREATE TABLE departments (
    dept_name VARCHAR(30),
    manager VARCHAR(50)
);

INSERT INTO departments VALUES
('HR', 'Susan'),
('Finance', 'Mark'),
('IT', 'John');

SELECT e.name, e.department, d.manager
FROM employees e
INNER JOIN departments d
ON e.department = d.dept_name;

-- ✅ 14. Aggregate Functions
SELECT SUM(salary) AS total_salary FROM employees;
SELECT COUNT(*) AS total_employees FROM employees;
SELECT AVG(salary) AS avg_salary FROM employees;

-- ✅ 15. GROUP BY
SELECT department, COUNT(*) AS num_employees
FROM employees
GROUP BY department;

-- ✅ 16. HAVING Clause
SELECT department, AVG(salary) AS avg_salary
FROM employees
GROUP BY department
HAVING AVG(salary) > 55000;

-- ✅ 17. Subqueries
SELECT name
FROM employees
WHERE salary > (
    SELECT AVG(salary) FROM employees
);

-- ✅ 18. Nested Queries
SELECT *
FROM employees
WHERE emp_id IN (
    SELECT emp_id FROM employees WHERE department = 'IT'
);
